QUERIES

1.) What is the total market capitalization of a specific stock on a specific date?

SELECT market_cap
FROM price
WHERE stock_name = 'TCS'
AND exchange = 'NSE'
AND date = '2019-01-21';


2.) What are the stocks in a specific sector?

SELECT stock_name, exchange, company_name
FROM stock
WHERE sector_id = 1;

3.) What are the transactions made by a specific user on a specific date?

SELECT *
FROM transaction
WHERE portfolioid IN (
    SELECT portfolio_id
    FROM portfolio
    WHERE userid = 1001)
AND transaction_date = '2019-01-24';

4.) What is the average closing price of a specific stock in a specific month?

SELECT AVG(closing_price)
FROM price
WHERE stock_name = 'INFY'
AND exchange = 'NSE'
AND date >= '2019-01-01'
AND date < '2019-01-11';

5.) What are the watchlists of a specific user?

SELECT watchlist_name
FROM watchlist
WHERE userid = 1011;

6.) What are the stocks in a specific watchlist?

SELECT watchlistcontains.stock_name,  watchlistcontains.exchange, company_name
FROM watchlistcontains 
JOIN stock
ON (watchlistcontains.stock_name = stock.stock_name
AND watchlistcontains.exchange = stock.exchange)
WHERE watchlist_id = 2001;


7.) What are the portfolios of a specific user?

SELECT portfolio_name
FROM portfolio
WHERE userid = 1003;

8.) What is the total value of a specific portfolio?
SELECT SUM(qty * buying_price)
FROM transaction
WHERE portfolioid = 3040;

9.) What are the transactions of a specific stock in a specific time period?
SELECT *
FROM transaction
WHERE stock_name = 'HDFCBANK'
AND exchange = 'NSE'
AND transaction_date >= '2019-01-01'
AND transaction_date < '2019-01-30'

10.) Find the total market cap for a given sector on a given date?

SELECT sector.sector_name, price.date, SUM(price.market_cap) as total_market_cap
FROM sector
JOIN stock ON sector.sector_id = stock.sector_id
JOIN price ON stock.stock_name = price.stock_name AND stock.exchange = price.exchange
WHERE sector.sector_name = 'Materials' AND price.date = '2019-01-01'
GROUP BY sector.sector_name, price.date;

11.)Find the average opening and closing price for a given stock on a given date range?

SELECT stock.stock_name, price.exchange, AVG(price.opening_price) as avg_opening_price, AVG(price.closing_price) as avg_closing_price
FROM stock
JOIN price ON stock.stock_name = price.stock_name AND stock.exchange = price.exchange
WHERE stock.stock_name = 'TATASTEEL' AND price.date BETWEEN '2019-01-01' AND '2019-01-15'
GROUP BY stock.stock_name, price.exchange;

12.) Find all users who have bought a stock in a given sector:?

SELECT DISTINCT userinfo.name, userinfo.emailid
FROM userinfo
JOIN portfolio ON userinfo.user_id = portfolio.userid
JOIN transaction ON portfolio.portfolio_id = transaction.portfolioid
JOIN stock ON transaction.stock_name = stock.stock_name AND transaction.exchange = stock.exchange
JOIN sector ON stock.sector_id = sector.sector_id
WHERE sector.sector_name = 'Energy';

13.) Find the top 5 stocks by market cap in a given sector on a given date?

SELECT stock.stock_name, stock.exchange, price.market_cap
FROM stock
JOIN price ON stock.stock_name = price.stock_name AND stock.exchange = price.exchange
JOIN sector ON stock.sector_id = sector.sector_id
WHERE sector.sector_name = 'Financials' AND price.date = '2019-01-09'
ORDER BY price.market_cap DESC
LIMIT 5;

14.) Find the total quantity of a given stock bought by a user across all their portfolios?
SELECT SUM(transaction.qty) as total_quantity
FROM userinfo
JOIN portfolio ON userinfo.user_id = portfolio.userid
JOIN transaction ON portfolio.portfolio_id = transaction.portfolioid
JOIN stock ON transaction.stock_name = stock.stock_name AND transaction.exchange = stock.exchange
WHERE userinfo.user_id = 1001 AND stock.stock_name = 'ICICIBANK';


15.) Give percentage return of every user across all their respective portfolios.
Select userid, ((SUM(closing_price)-SUM(buying_price))/SUM(closing_price))*100 AS Per_return
from (portfolio JOIN transaction ON portfolio_id = portfolioid) NATURAl JOIN stock Natural Join price where 
price.date in (select date from price order by price.date DESC LIMIT 1 )
group by userid ;

